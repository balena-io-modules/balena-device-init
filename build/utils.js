// Generated by CoffeeScript 1.12.7

/*
Copyright 2016 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var Promise, _, convertFilePathDefinition, definitionForImage, imagefs, path, rindle, stringToStream;

Promise = require('bluebird');

_ = require('lodash');

rindle = Promise.promisifyAll(require('rindle'));

path = require('path');

stringToStream = require('string-to-stream');

imagefs = require('resin-image-fs');


/**
 * @summary Get device type manifest of an image
 * @function
 *
 * @param {String} image - path to image
 * @returns {Promise<Object | null>} device type manifest or null
 *
 * @example
 * utils.getImageManifest('path/to/image.img', 'raspberry-pi').then (manifest) ->
 * 	console.log(manifest)
 */

exports.getImageManifest = function(image) {
  return Promise.using(imagefs.read({
    image: image,
    partition: 1,
    path: '/device-type.json'
  }), rindle.extractAsync).then(JSON.parse).catchReturn(null);
};


/**
 * @summary Convert a device type file definition to resin-image-fs v4 format
 * @function
 * @protected
 *
 * @param {Object} definition - write definition
 *
 * @returns {Object} a converted write definition
 *
 * @example
 * utils.convertFileDefinition
 * 	partition:
 * 		primary: 4
 * 		logical: 1
 * 	path: '/config.json'
 */

exports.convertFilePathDefinition = convertFilePathDefinition = function(inputDefinition) {
  var definition;
  definition = _.cloneDeep(inputDefinition);
  if (_.isObject(definition.partition)) {
    if (definition.partition.logical != null) {
      definition.partition = definition.partition.logical + 4;
    } else {
      definition.partition = definition.partition.primary;
    }
  }
  return definition;
};


/**
 * @summary Add image info to a device type config definition
 * @function
 * @protected
 *
 * @param {String} image - image path
 * @param {Object} definition - write definition
 *
 * @returns {Object} a write definition
 *
 * @example
 * utils.definitionForImage 'my/rpi.img',
 * 	partition:
 * 		primary: 4
 * 		logical: 1
 * 	path: '/config.json'
 */

exports.definitionForImage = definitionForImage = function(image, configDefinition) {
  configDefinition = _.cloneDeep(configDefinition);
  if (configDefinition.image != null) {
    configDefinition.image = path.join(image, configDefinition.image);
  } else {
    configDefinition.image = image;
  }
  return configDefinition;
};


/**
 * @summary Get image OS version
 * @function
 *
 * @param {String} image - path to image
 * @param {Object} manifest - device type manifest
 * @returns {Promise<string|null>} ResinOS version, or null if it could not be determined
 *
 * @example
 * utils.getImageOsVersion('path/to/image.img', manifest).then (version) ->
 * 	console.log(version)
 */

exports.getImageOsVersion = function(image, manifest) {
  var definition, ref;
  definition = (ref = manifest != null ? manifest.configuration.config : void 0) != null ? ref : {
    partition: 1
  };
  definition = definitionForImage(image, definition);
  definition = convertFilePathDefinition(definition);
  definition.path = '/os-release';
  return Promise.resolve(imagefs.readFile(definition)).then(function(osReleaseString) {
    var parsedOsRelease;
    parsedOsRelease = _(osReleaseString).split('\n').map(function(line) {
      var match;
      match = line.match(/(.*)=(.*)/);
      if (match) {
        return [match[1], match[2].replace(/^"(.*)"$/, '$1').replace(/^'(.*)'$/, '$1')];
      } else {
        return false;
      }
    }).filter().fromPairs().value();
    if (parsedOsRelease.NAME !== 'Resin OS' && parsedOsRelease.NAME !== 'balenaOS') {
      return null;
    } else {
      return parsedOsRelease.VERSION || null;
    }
  }).catchReturn(null);
};


/**
 * @summary Write config.json to image
 * @function
 * @protected
 *
 * @param {String} image - image path
 * @param {Object} config - config.json object
 * @param {Object} definition - write definition
 *
 * @returns {Promise}
 *
 * @example
 * utils.writeConfigJSON 'my/rpi.img',
 * 	hello: 'world'
 * ,
 * 	partition:
 * 		primary: 4
 * 		logical: 1
 * 	path: '/config.json'
 */

exports.writeConfigJSON = function(image, config, definition) {
  config = JSON.stringify(config);
  definition = exports.definitionForImage(image, definition);
  return imagefs.write(definition, stringToStream(config));
};
